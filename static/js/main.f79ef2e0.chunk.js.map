{"version":3,"sources":["components/card/card.component.jsx","components/card-list/card-list.component.jsx","components/search-box/search-box.component.jsx","App.js","reportWebVitals.js","index.js"],"names":["Card","props","className","alt","src","monster","name","email","id","CardList","monsters","map","SearchBox","placeholder","handlechange","type","onChange","App","state","searchField","fetch","then","response","json","users","setState","this","filteredMonster","filter","toLowerCase","includes","e","target","value","React","Component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"mTAGaA,EAAO,SAAAC,GAAK,OACrB,sBAAKC,UAAY,iBAAjB,UACI,qBACCC,IAAI,UACJC,IAAK,oCAEN,6BAAKH,EAAMI,QAAQC,OACnB,4BAAIL,EAAMI,QAAQE,QAClB,4BAAIN,EAAMI,QAAQG,SCPbC,G,MAAW,SAAAR,GAAK,OACzB,qBAAKC,UAAU,YAAf,SAEID,EAAMS,SAASC,KAAI,SAAAN,GAAO,OACxB,cAAC,EAAD,CAAuBA,QAAUA,GAAtBA,EAAQG,WCLhBI,G,MAAY,SAAC,GAAD,IAAEC,EAAF,EAAEA,YAAYC,EAAd,EAAcA,aAAd,OACrB,uBAAOC,KAAK,SACXF,YAAaA,EACbG,SAAUF,MCiCAG,G,wDAjCb,aAAc,IAAD,8BACX,gBACKC,MAAM,CACVR,SAAS,GACTS,YAAY,IAJF,E,qDAQb,WAAqB,IAAD,OAClBC,MAAM,6CACLC,MAAK,SAAAC,GAAQ,OAAGA,EAASC,UACzBF,MAAK,SAAAG,GAAK,OAAI,EAAKC,SAAS,CAACf,SAASc,S,oBAIzC,WAAS,IAAD,SACyBE,KAAKR,MAA7BR,EADD,EACCA,SAASS,EADV,EACUA,YACVQ,EAAkBjB,EAASkB,QAAQ,SAAAvB,GAAO,OAC9CA,EAAQC,KAAKuB,cAAcC,SAASX,EAAYU,kBAEpD,OACE,sBAAK3B,UAAU,MAAf,UACE,iDACE,cAAC,EAAD,CACEW,YAAY,kBACZC,aAAc,SAAAiB,GAAM,EAAKN,SAAS,CAACN,YAAYY,EAAEC,OAAOC,WAE3D,cAAC,EAAD,CAAUvB,SAAUiB,W,GA5BTO,IAAMC,YCOTC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBjB,MAAK,YAAkD,IAA/CkB,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.f79ef2e0.chunk.js","sourcesContent":["import React from 'react';\r\nimport './card.styles.css';\r\n\r\nexport const Card = props => (\r\n    <div className = \"card-container\">\r\n        <img\r\n         alt='monster' \r\n         src={'https://robohash.org/9?set=set2'} \r\n        />\r\n        <h2>{props.monster.name}</h2>\r\n        <p>{props.monster.email}</p>\r\n        <p>{props.monster.id}</p>\r\n    </div>\r\n);","import React from 'react';\r\nimport { Card } from '../card/card.component';\r\nimport './card-list.styles.css';\r\n\r\nexport const CardList = props => (\r\n    <div className=\"card-list\">\r\n        {\r\n        props.monsters.map(monster => (\r\n          <Card key={monster.id} monster= {monster}/>\r\n        ))\r\n         }\r\n    </div>\r\n);","import React from 'react';\r\nimport './search-box.styles.css';\r\n\r\nexport const SearchBox = ({placeholder,handlechange}) => (\r\n    <input type='search'\r\n     placeholder={placeholder}\r\n     onChange={handlechange}\r\n     />\r\n);","import React from 'react';\nimport { CardList } from './components/card-list/card-list.component';\nimport { SearchBox } from './components/search-box/search-box.component';\nimport './App.css';\n\nclass App extends React.Component {\n  constructor(){\n    super();\n    this.state={\n     monsters:[],\n     searchField:''\n    };\n  }\n\n  componentDidMount() {\n    fetch('http://jsonplaceholder.typicode.com/users')\n    .then(response =>response.json())\n    .then(users => this.setState({monsters:users})\n    );\n  }\n\n  render(){\n    const {monsters,searchField} = this.state;\n    const filteredMonster = monsters.filter( monster =>\n      monster.name.toLowerCase().includes(searchField.toLowerCase())\n    )\n  return (\n    <div className=\"App\">\n      <h1>Monster Rolodex</h1>\n        <SearchBox\n          placeholder=\"Search Monsters\"\n          handlechange={e => {this.setState({searchField:e.target.value})}}\n        />\n       <CardList monsters={filteredMonster}/>\n    </div>\n  );\n  }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}